#+TITLE: Emacs Config

* Table Of Contents :TOC:
- [[#startup-stuff][Startup Stuff]]
  - [[#recompile-all-packages][Recompile All Packages]]
  - [[#user-info][User info]]
  - [[#menus-stuff][Menus stuff]]
  - [[#refresh-buffer][Refresh Buffer]]
  - [[#window-stuff][Window Stuff]]
  - [[#line-stuff][Line stuff]]
  - [[#expand-select][Expand Select]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#iedit][IEdit]]
  - [[#smart-narrowing][Smart narrowing]]
  - [[#kill-behaviour][Kill behaviour]]
  - [[#modline][Modline]]
  - [[#dashboard][Dashboard]]
  - [[#page-breaker][Page breaker]]
  - [[#quelpa][Quelpa]]
  - [[#auto-update-packages][Auto Update packages]]
  - [[#transparency][Transparency]]
  - [[#improve-joplin][Improve Joplin]]
- [[#useful-packages][Useful packages]]
  - [[#try][Try]]
  - [[#which-key][Which Key]]
  - [[#lorem-ipsum][Lorem ipsum]]
  - [[#consel][Consel]]
  - [[#ivy][Ivy]]
  - [[#company][Company]]
  - [[#undo-tree][Undo Tree]]
  - [[#edit-indirect][Edit Indirect]]
  - [[#emoji-support][Emoji Support]]
  - [[#ibuffer-projectile][IBuffer Projectile]]
  - [[#hungry-delete][Hungry Delete]]
  - [[#move-text][Move Text]]
  - [[#avy][Avy]]
  - [[#treemacs][Treemacs]]
- [[#programming][Programming]]
  - [[#snippets][Snippets]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#lsp][LSP]]
  - [[#rust][Rust]]
  - [[#lisp][Lisp]]
  - [[#markdown][Markdown]]
  - [[#web-dev][Web Dev]]
  - [[#rest-client][Rest Client]]
  - [[#python][Python]]
  - [[#dart][Dart]]
  - [[#golang][Golang]]
  - [[#flutter][Flutter]]
  - [[#general][General]]
  - [[#godot][Godot]]
  - [[#dap][DAP]]
- [[#org-mode][Org Mode]]
  - [[#easy-templates][Easy templates]]
  - [[#pretty-bullets][Pretty Bullets]]
  - [[#custom-variables][Custom variables]]
  - [[#pretty-stuff][Pretty stuff]]
  - [[#babel][Babel]]
  - [[#latex][Latex]]
  - [[#toc][TOC]]
- [[#terminal][Terminal]]
  - [[#vterm][Vterm]]
  - [[#eshell][Eshell]]
- [[#dired][Dired]]
  - [[#async][Async]]
  - [[#dired-1][Dired+]]
- [[#asthetic-stuff][Asthetic Stuff]]
  - [[#font][Font]]
  - [[#pretty-stuff-1][Pretty stuff]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
- [[#other-modes][Other Modes]]
  - [[#pdf][Pdf]]
  - [[#engine-mode][Engine Mode]]
  - [[#json][Json]]
  - [[#yaml][Yaml]]
  - [[#latex-1][LATEX]]
- [[#rss][RSS]]

* Startup Stuff
** Recompile All Packages
- After upgrading emacs.
(byte-recompile-directory package-user-dir nil 'force)
** User info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ayush Singh")
  (setq user-mail-address "ayush1325@protonmail.com")
#+END_SRC
** Menus stuff
- Disable toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src
- Shortent prompt answers
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
- Use ibuffer
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+END_SRC
** Refresh Buffer
- Bind refresh to <f5>.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
** Window Stuff
- Ace window for better window switching.
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (winner-mode 1)

  (use-package ace-window
    :ensure t
    :bind
    ([remap other-window] . ace-window)
    :custom-face
    (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))
#+END_SRC
- Window Resizing. Key: *S-C-<arrow>*
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src
** Line stuff
- Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
- Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
#+end_src
** Expand Select
- Key: *C-=*
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))
#+END_SRC
** IEdit
- Allows to edit same word at all instances.
- Key: *C-;*
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
** Smart narrowing
- Key: *C-x n*
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
   ((region-active-p)
    (narrow-to-region (region-beginning) (region-end)))
   ((derived-mode-p 'org-mode)
     (cond ((ignore-errors (org-edit-src-code))
    (delete-other-windows))
   ((org-at-block-p)
    (org-narrow-to-block))
   (t (org-narrow-to-subtree))))
   (t (narrow-to-defun))))
   (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
** Kill behaviour
- For better integration with system clipboard
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
** Modline
*** Using doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
*** Hide Modline
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :ensure t)
#+end_src
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :if (< (length command-line-args) 2)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda ()
                                  (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
                            (projects . 10)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t))
#+END_SRC
** Page breaker
- Mainly for Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (setq global-page-break-lines-mode 1))
#+END_SRC
** Quelpa
- For installing some packages
#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :config
    (setq quelpa-upgrade-interval 7)
    (add-hook #'after-init-hook #'quelpa-upgrade-all-maybe))
#+END_SRC
** Auto Update packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 90))
  (add-to-list 'default-frame-alist '(alpha 95 90))
#+END_SRC
** Improve Joplin
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
      '(server-switch-hook
        '((lambda nil
           (let (server-buf)
             (setq backup-by-copying t))))))
#+END_SRC
* Useful packages
** Try
To try out packages without installing
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** Which Key
For key suggestions
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
** Lorem ipsum
Random text generator
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
** Consel
- For ivy and better kill support
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+END_SRC
- Projectile Integration
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :bind (("C-c p" . projectile-command-map)))
#+end_src
** Ivy
Lot of autocompletions
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1))
#+END_SRC
- Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))

  (setq all-the-icons-ivy-rich-icon-size 0.8)
#+END_SRC
** Company 
- For autocomplete inside buffer
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode 1))

  (setq company-minimum-prefix-length 1
          company-idle-delay 0.0)

  (setq company-global-modes '(not org-mode markdown-mode))
#+END_SRC
- Emoji Support with Company
#+begin_src emacs-lisp
  (use-package company-emoji
    :ensure t
    :config
    (add-to-list 'company-backends 'company-emoji))
#+end_src
** Undo Tree
For better undo and redo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode 1))
#+END_SRC
** Edit Indirect
#+BEGIN_SRC emacs-lisp
  (use-package edit-indirect
    :ensure t)
#+END_SRC
** Emoji Support
- Emoji mode.
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t)
#+END_SRC
** IBuffer Projectile
Group ibuffer files based on projects
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :config
    (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode t))
#+END_SRC
** Move Text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :bind (("M-<up>" . move-text-up)
           ("M-<down>" . move-text-down)))
#+END_SRC
** Avy
- For better moving
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)
#+END_SRC
** Treemacs
- Basic Install
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-width                         35)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC
- Projectile
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
#+END_SRC
- Icons
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))
#+END_SRC
- Magit Integration
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC
- Perspective Integration
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-persp
    :after treemacs persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

* Programming
** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (yas-global-mode))
#+end_src
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq git-commit-summary-max-length 50))
#+END_SRC
** LSP
*** Base Install
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "s-l")
    :hook ((latex-mode . lsp)
           (gdscript-mode . lsp)
           (clojure-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :config
    ;;; Clojure
    (setenv "PATH" (concat
                     "/usr/local/bin" path-separator
                     (getenv "PATH")))
    (dolist (m '(clojure-mode
                 clojurec-mode
                 clojurescript-mode
                 clojurex-mode))
       (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
    (setq lsp-enable-indentation nil
          lsp-clojure-server-command '("bash" "-c" "clojure-lsp"))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+END_SRC
*** Company Integration
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t
    :commands company-lsp)
#+END_SRC
*** Ivy Integration
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
#+end_src
*** Increase GC threashold
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
#+END_SRC
*** Increase data read by a process
#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+END_SRC
*** Increase refresh rate.
#+BEGIN_SRC emacs-lisp
  (setq lsp-idle-delay 0.500)
#+END_SRC
*** Treemacs Integration
#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :config
    (setq lsp-metals-treeview-show-when-views-received t)
    (lsp-treemacs-sync-mode 1))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :ensure t
    :mode ("\\.rs\\'" . rustic-mode)
    :config
    (setq rustic-analyzer-command "/usr/bin/rust-analyzer")
    (setq rustic-lsp-server 'rust-analyzer)
    (add-hook 'rustic-mode-hook #'subword-mode)
    (add-hook 'rustic-mode-hook #'smartparens-strict-mode)
    (add-hook 'rustic-mode-hook #'electric-pair-mode))

  (add-hook 'before-save-hook (lambda () (when (eq 'rustic-mode major-mode)
                                      (lsp-format-buffer))))
  (add-hook 'rustic-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+END_SRC
** Lisp
*** Common
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((lisp-mode clojure-mode emacs-lisp-mode cider-repl-mode) . rainbow-delimiters-mode))

  (use-package smartparens
    :ensure t
    :hook ((clojure-mode cider-repl-mode emacs-lisp-mode slime-repl-mode lisp-mode) . smartparens-strict-mode)
    :config (sp-use-smartparens-bindings))

  (use-package aggressive-indent
    :ensure t
    :hook (clojure-mode . aggressive-indent-mode))

  (require 'smartparens-config)
#+END_SRC
*** Common Lisp
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure t
    :hook (emacs-lisp-mode . eldoc-mode))

  (use-package highlight-defined
    :ensure t
    :hook (emacs-lisp-mode . highlight-defined-mode))
#+END_SRC
*** Clojure
**** Clojure Mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
#+END_SRC
**** Cider
#+begin_src emacs-lisp
  (use-package cider
    :ensure t
    :hook (clojure-mode . cider-mode))
#+end_src
**** Snippets
#+begin_src emacs-lisp
  (use-package clojure-snippets
    :ensure t)
#+end_src
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package adaptive-wrap
    :ensure t
    :hook (markdown-mode . adaptive-wrap-prefix-mode))
#+END_SRC
** Web Dev
- Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
#+END_SRC
- Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook web-mode)
#+END_SRC
- Prettier
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :hook (web-mode . prettier-js-mode))
#+END_SRC
- Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC
- Skewer Mode
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :ensure t
    :hook ((js2-mode . skewer-mode)
           (css-mode . skewer-css-mode)
           (html-mode . skewer-html-mode)))
#+END_SRC
** Rest Client
- Basic package
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC
- Org support
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient
    :ensure t)
#+END_SRC
- Company integration
#+BEGIN_SRC emacs-lisp
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC
** Python
- Pipenv porcelain
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :ensure t
    :config
    (setq pipenv-with-flycheck nil))
#+END_SRC
** Dart
- Basic Mode
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :ensure t
    :custom
    (dart-format-on-save t)
    (dart-sdk-path "~/flutter/bin/cache/dart-sdk/"))
#+END_SRC
- Language Server
#+BEGIN_SRC emacs-lisp
  (use-package lsp-dart
    :ensure t
    :hook (dart-mode . lsp))
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
** Flutter
#+BEGIN_SRC emacs-lisp
  (use-package flutter
    :ensure t
    :bind (:map dart-mode-map
                ("C-M-x" . #'flutter-run-or-hot-reload))
    :custom
    (flutter-sdk-path "~/flutter/"))
#+END_SRC
- Run app from Desktop without emulator
#+begin_src emacs-lisp
  (use-package hover
    :ensure t)
#+end_src
** General
- Some Keybindings
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode
            (lambda ()
              (define-key "\C-a" 'back-to-indentation)))
#+END_SRC
** Godot
#+BEGIN_SRC emacs-lisp
  (use-package gdscript-mode
    :ensure t)
#+END_SRC
** DAP
- Base Install
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t)
#+end_src
- Posframe
#+begin_src emacs-lisp
  (use-package posframe
    :ensure t)
#+end_src
* Org Mode
** Easy templates
- For <s shortcut and stuff.
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC
** Pretty Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Custom variables
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-startup-folded (quote overview))
  (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
** Pretty stuff
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-ellipsis "⤵")
  (setq org-src-tab-acts-natively t)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)
     (emacs-lisp . t)
  ;   (rust . t)
     (clojure . t)))

  (setq org-babel-clojure-backend 'cider)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC
** TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-mode))
#+end_src
* Terminal
** Vterm
*** Base Install
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
*** Disable line numbers
#+begin_src emacs-lisp
  (add-hook 'vterm-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (hide-mode-line-mode t)))
#+end_src
** Eshell
*** Aweshell
#+BEGIN_SRC emacs-lisp
  (use-package aweshell
    :ensure t
    :quelpa (aweshell :fetcher git :url "https://github.com/manateelazycat/aweshell.git")
    :defer 1
    :config
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-lambda "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
            eshell-prompt-function 'epe-theme-lambda)))

  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC
*** Autosuggestions
#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :ensure t
    :hook (eshell-mode . esh-autosuggest-mode))
#+END_SRC
*** Extras
#+BEGIN_SRC emacs-lisp
  (use-package eshell-prompt-extras
    :ensure t)
#+END_SRC
*** Smart display
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (require 'em-smart)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
#+END_SRC
*** Load Path
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat
                  "/usr/local/bin" path-separator
                  (getenv "PATH")))
#+END_SRC
* Dired
** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :config
    (dired-async-mode 1))
#+END_SRC
** Dired+
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t
    :quelpa (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
    :defer 1)
#+END_SRC
* Asthetic Stuff
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "JetBrainsMono Nerd Font Mono"
                      :height 180
                      :weight 'normal
                      :width 'normal)
#+end_src
** Pretty stuff
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :hook (prog-mode . highlight-parentheses-mode))

  (global-prettify-symbols-mode +1)

  (use-package rainbow-mode
    :ensure t
    :hook prog-mode)

  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** Theme
*** Solari Mode
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (solaire-global-mode +1)
    (solaire-mode-swap-bg))
#+end_src
*** Doom Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (doom-themes-treemacs-config))
#+END_SRC
* Other Modes
** Pdf
*** Keybindings
***** Navigation
| Action                                     | Key               |
|--------------------------------------------+-------------------|
| Scroll Up / Down by page-full              | space / backspace |
| Scroll Up / Down by line                   | C-n / C-p         |
| Scroll Right / Left                        | C-f / C-b         |
| Top of Page / Bottom of Page               | < / >             |
| Next Page / Previous Page                  | n / p             |
| First Page / Last Page                     | M-< / M->         |
| Incremental Search Forward / Backward      | C-s / C-r         |
| Occur (list all lines containing a phrase) | M-s o             |
| Jump to Occur Line                         | RETURN            |
| Pick a Link and Jump                       | F                 |
| Incremental Search in Links                | f                 |
| History Back / Forwards                    | B / N             |
| Display Outline                            | o                 |
| Jump to Section from Outline               | RETURN            |
| Jump to Page                               | M-g g             |

***** Display
| Action                                        | Key                                             |
|-----------------------------------------------+-------------------------------------------------|
| Zoom in / Zoom out                            | + / -                                           |
| Fit Height / Fit Width / Fit Page             | H / W / P                                       |
| Trim margins (set slice to bounding box)      | s b                                             |
| Reset margins                                 | s r                                             |
| Reset Zoom                                    | 0                                               |
| Annotations                                   |                                                 |
| List Annotations                              | C-c C-a l                                       |
| Jump to Annotations from List                 | SPACE                                           |
| Mark Annotation for Deletion                  | d                                               |
| Delete Marked Annotations                     | x                                               |
| Unmark Annotations                            | u                                               |
| Close Annotation List                         | q                                               |
| Add and edit annotations                      | via Mouse selection and left-click context menu |
***** Syncing with Auctex
| Action                                        | Key       |
|-----------------------------------------------+-----------|
| jump to PDF location from source              | C-c C-g   |
| jump source location from PDF                 | C-mouse-1 |
***** Miscellaneous
| Action                                        | Key     |
|-----------------------------------------------+---------|
| Refresh File (e.g., after recompiling source) | g       |
| Print File                                    | C-c C-p |
*** Install
**** Basic mode
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (require 'pdf-tools)
    (require 'pdf-view)
    (require 'pdf-misc)
    (require 'pdf-occur)
    (require 'pdf-util)
    (require 'pdf-annot)
    (require 'pdf-info)
    (require 'pdf-isearch)
    (require 'pdf-history)
    (require 'pdf-links)
    (pdf-tools-install :no-query))
#+END_SRC
**** Save last position
#+BEGIN_SRC emacs-lisp
  (use-package pdf-view-restore
    :ensure t
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+END_SRC
**** Disable line numbers
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src
** Engine Mode
To search directly from eamcs
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t))

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
#+END_SRC
** Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC
** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
** LATEX
#+BEGIN_SRC emacs-lisp
  (use-package latex-pretty-symbols
    :ensure t)
#+END_SRC
* RSS
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t)

  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))

  (use-package elfeed-protocol
    :ensure t
    :config
    (setq elfeed-use-curl t)
    (elfeed-set-timeout 36000)
    (setq elfeed-curl-extra-arguments '("--insecure"))
    (elfeed-protocol-enable))

  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))
#+END_SRC
