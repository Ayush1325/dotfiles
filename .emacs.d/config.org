* Startup Stuff
** User info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ayush Singh")
  (setq user-mail-address "ayush1325@protonmail.com")
#+END_SRC
** Menus stuff
- Disable toolbar
- Shortent prompt answers
- Use ibuffer
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (defalias 'list-buffers 'ibuffer)
#+END_SRC
** Refresh Buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
** Window Stuff
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (winner-mode 1)

  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)

  (use-package ace-window
    :ensure t
    :bind
    ([remap other-window] . ace-window)
    :custom-face
    (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

#+END_SRC
** Line stuff
- Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Expand Select
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))
#+END_SRC
** IEdit
Allows to edit same word at all instances
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC
** Smart narrowing
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
   ((region-active-p)
    (narrow-to-region (region-beginning) (region-end)))
   ((derived-mode-p 'org-mode)
     (cond ((ignore-errors (org-edit-src-code))
    (delete-other-windows))
   ((org-at-block-p)
    (org-narrow-to-block))
   (t (org-narrow-to-subtree))))
   (t (narrow-to-defun))))
   (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC
** Kill behaviour
For better integration with system clipboard
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
** Modline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :if (< (length command-line-args) 2)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda ()
                                  (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (bookmarks . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t))
#+END_SRC
** Page breaker
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (setq global-page-break-lines-mode 1))
#+END_SRC
** Quelpa
#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :ensure t)
#+END_SRC
* Useful packages
** Try
To try out packages without installing
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** Which Key
For key suggestions
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
** Lorem ipsum
Random text generator
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
** Consel
For ivy and better kill support
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package counsel-projectile
    :ensure t
    :bind (("C-c p" . projectile-command-map)))
#+END_SRC
** Ivy
Lot of autocompletions
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1))
#+END_SRC
** Company 
For autocomplete inside buffer
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode 1))

  (setq company-global-modes '(not org-mode markdown-mode))

  (use-package company-emoji
    :ensure t
    :config
    (add-to-list 'company-backends 'company-emoji))
#+END_SRC
** Undo Tree
For better undo and redo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode 1))
#+END_SRC
** Edit Indirect
#+BEGIN_SRC emacs-lisp
  (use-package edit-indirect
    :ensure t)
#+END_SRC
** Emoji Support
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t)
#+END_SRC
** IBuffer Projectile
Group ibuffer files based on projects
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :config
    (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode t))
#+END_SRC
* Programming
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq git-commit-summary-max-length 50))
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "s-l")
    :hook ((prog-mode . lsp)
           (vue-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :commands company-lsp)

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (use-package dap-mode
    :ensure t)
#+END_SRC
** Rust Mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)

  (use-package eldoc
    :ensure t
    :hook (emacs-lisp-mode-hook . eldoc-mode))

  (use-package highlight-defined
    :ensure t
    :hook (emacs-lisp-mode-hook . highlight-defined-mode))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package adaptive-wrap
    :ensure t
    :hook (markdown-mode . adaptive-wrap-prefix-mode))
#+END_SRC
** Vuejs
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :ensure t
    :config
    (setq mmm-submode-decoration-level 0))

  (setq mmm-js-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
  (setq mmm-typescript-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
#+END_SRC
** Rest Client
- Basic package
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC
- Org support
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient
    :ensure t)
#+END_SRC
* Org Mode
** Pretty Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Custom variables
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-startup-folded (quote overview))
#+END_SRC
** Pretty stuff
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-ellipsis "â¤µ")
  (setq org-src-tab-acts-natively t)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)
     (emacs-lisp . t)))
#+END_SRC

* Eshell
** Autosuggestions
#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :ensure t
    :hook (eshell-mode . esh-autosuggest-mode))
#+END_SRC
** Extras
#+BEGIN_SRC emacs-lisp
  (use-package eshell-prompt-extras
    :ensure t
    )

  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
          eshell-prompt-function 'epe-theme-lambda))
#+END_SRC
* Dired
** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :config
    (dired-async-mode 1))
#+END_SRC
** Dired+
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :quelpa (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
    :defer 1)
#+END_SRC
** Sunrise Commander
#+BEGIN_SRC emacs-lisp
  (use-package sunrise-commander
    :quelpa (sunrise :fetcher git :url "https://github.com/sunrise-commander/sunrise-commander.git")
    :defer 1)
#+END_SRC
* Asthetic Stuff
** Pretty stuff
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :hook (prog-mode . highlight-parentheses-mode))

  (global-prettify-symbols-mode +1)

  (use-package rainbow-mode
    :ensure t
    :hook prog-mode)

  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-dracula t))

  (doom-themes-visual-bell-config)

  (doom-themes-org-config)
#+END_SRC
* Other Modes
** Engine Mode
To search directly from eamcs
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t))

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
#+END_SRC
** Pdf
- Basic mode
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (require 'pdf-tools)
    (require 'pdf-view)
    (require 'pdf-misc)
    (require 'pdf-occur)
    (require 'pdf-util)
    (require 'pdf-annot)
    (require 'pdf-info)
    (require 'pdf-isearch)
    (require 'pdf-history)
    (require 'pdf-links)
    (pdf-tools-install :no-query))
#+END_SRC
- Save last position
#+BEGIN_SRC emacs-lisp
  (use-package pdf-view-restore
    :ensure t
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+END_SRC
