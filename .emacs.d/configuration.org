#+TITLE: Emacs Config
#+AUTHOR: Ayush Singh
#+EMAIL: ayushsingh1325@gmail.com

* Basic Setup
** Use Package
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))

  (use-package use-package-ensure-system-package
    :ensure t)
#+END_SRC

* Set Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ayush Singh"
	user-mail-address "ayushsingh1325@gmail.com"
	calendar-latitude 23.046593
	calendar-longitude 72.530460
	calendar-location-name "Gujarat, India"
	)
#+END_SRC

* Interface
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . #'helm-M-x)
	   ("C-x r b" . #'helm-filtered-bookmarks)
	   ("C-x C-f" . #'helm-find-files)
	   ("C-x C-b" . #'helm-buffers-list))
    :config
    (helm-mode 1))
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Page Breaker
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :config
    (setq global-page-break-lines-mode 1))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda ()
				  (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (agenda . 5)
			  (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font .  "UbuntuMono Nerd Font Bold" ))
  (set-face-attribute 'default nil :height 150)
#+END_SRC
** Pretty Stuff
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :hook (prog-mode . highlight-parentheses-mode))
  (global-prettify-symbols-mode +1)
  (use-package rainbow-mode
    :hook prog-mode)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . 'mc/edit-lines)
	   ("C->" . 'mc/mark-next-like-this)
	   ("C-c C-<" . 'mc/mark-all-like-this)))
#+END_SRC
** Modline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode))
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+END_SRC

* Programming
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
		("s-p" . 'projectile-command-map)
		("C-c p" . 'projectile-command-map))
    :config
    (projectile-mode +1))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "s-l")
    :hook ((prog-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)


  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp :commands company-lsp)

  (use-package helm-lsp :commands helm-lsp-workspace-symbol)

  (use-package dap-mode)

  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
		 :config
		 (setq git-commit-summary-max-length 50))
  (use-package git-timemachine)
  (use-package magithub
    :after magit
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/github"))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit)
  (use-package eldoc
     :config
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
  (use-package highlight-defined
    :hook (emacs-lisp-mode-hook . highlight-defined-mode))
#+END_SRC

* Org Mode
** Pretty Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Babble
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (dot . t)))
#+END_SRC
** Syntax Highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Header Collapse Symbol
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â¤µ")
#+END_SRC
** Make TAB act as if in language's major mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

* Eshell
** Autosuggestion
#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :ensure t)
#+END_SRC

* Documents
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools)
#+END_SRC

* Dired
** Copy Directories recusrsively
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC
** Ask before recursively deleting
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC
** Perform actions asynchronously
#+BEGIN_SRC emacs-lisp
  (use-package async
    :config
    (dired-async-mode 1))
#+END_SRC
